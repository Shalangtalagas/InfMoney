-- Grow a Garden Duplication + Money Logic (Wrapped in Function)
_G.StartDupeScript = function()
	local Players = game:GetService("Players")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local RunService = game:GetService("RunService")

	local player = Players.LocalPlayer
	local Backpack = player:WaitForChild("Backpack")
	local Character = player.Character or player.CharacterAdded:Wait()
	local gui = player:WaitForChild("PlayerGui")
	local Item_Module = require(ReplicatedStorage:WaitForChild("Item_Module"))

	local dupes = {}
	local totalMoney = 0
	local startTime = os.clock()

	local function getMoneyPerHour()
		local elapsed = os.clock() - startTime
		if elapsed == 0 then return 0 end
		return math.floor((totalMoney / elapsed) * 3600)
	end

	local function getCrops()
		local all = {}
		for _, item in pairs(Backpack:GetChildren()) do
			if item:IsA("Tool") and item:FindFirstChild("Plant") and not item:GetAttribute("IsDupe") then
				table.insert(all, item)
			end
		end
		for _, item in pairs(Character:GetChildren()) do
			if item:IsA("Tool") and item:FindFirstChild("Plant") and not item:GetAttribute("IsDupe") then
				table.insert(all, item)
			end
		end
		return all
	end

	local function duplicate(item)
		local clone = item:Clone()
		clone.Parent = player.Backpack
		clone:SetAttribute("IsDupe", true)
		table.insert(dupes, clone)
	end

	local function formatMoney(v)
		return string.format("%.1fK", v / 1000)
	end

	while true do
		task.wait(math.random(3, 5))

		-- Duplicate real crops
		for _, crop in pairs(getCrops()) do
			if crop and (crop:IsDescendantOf(Backpack) or crop:IsDescendantOf(Character)) then
				duplicate(crop)
			end
		end

		-- Sell duped items
		for i = #dupes, 1, -1 do
			local tool = dupes[i]
			if tool and (tool:IsDescendantOf(Backpack) or tool:IsDescendantOf(Character)) then
				local plant = tool:FindFirstChild("Plant")
				if plant then
					local value = Item_Module:GetValue(plant)
					totalMoney += value
					tool:Destroy()
				end
				table.remove(dupes, i)
			end
		end

		-- Optional: print MPH to console
		warn("MPH: " .. formatMoney(getMoneyPerHour()))
	end
end
